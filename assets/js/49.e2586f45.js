(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{272:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git全解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git全解读","aria-hidden":"true"}},[t._v("#")]),t._v(" git全解读")]),t._v(" "),s("p",[s("strong",[t._v("版本库又名仓库")]),t._v(" ，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。")]),t._v(" "),s("h2",{attrs:{id:"创建并提交一个版本库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建并提交一个版本库","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建并提交一个版本库")]),t._v(" "),s("blockquote",[s("p",[t._v("课外知识: mkdir 创建目录; pwd 显示绝对路径; cat 文件名 查看文件内容\n注：所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。")]),t._v(" "),s("blockquote",[s("p",[t._v("Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，如果要真要使用版本控制系统，就要以纯文本方式编写文件。\n千万不要使用Windows自带的记事本编辑任何文本文件,原因是Microsoft开发记事本的团队,在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.")])])]),t._v(" "),s("h3",{attrs:{id:"_1-核心操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-核心操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 1 核心操作")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 1.初始化仓库,.git目录默认隐藏,可以通过命令ls -ah显示")]),t._v("\n    git init\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 2.把文件添加到版本库，可以一次添加多个文件，git add . 代表把所有文件全部提交\n    git add 文件名 文件名")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 3.把文件提交到当前分支\n    git commit -m '本次提交的说明'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 4.把项目提交到(远程)仓储\n    git push")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-分支管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-分支管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.分支管理")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 1.查看远程分支")]),t._v("\n    git branch -a\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 2.查看本地分支\n    git branch")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 3.创建并切换分支 （加-b表示创建并切换）\n    git checkout -b 分支名")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 4.切换回分支\n    git checkout 分支名")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 5.从主分支里创建新分支\n    git checkout master -b 新分支名")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 6.合并某分支到当前分支\n    git merge 分支名")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 7.删除分支\n    git branch -d 分支名\n    git branch -D 分支名 (强行删除分支)")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-解决冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-解决冲突","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.解决冲突")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 情景一 提交或拉取时冲突")]),t._v("\n    git stash\n    git pull\n    git stash pop\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 情景二 如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pull\n    git reset --hard HEAD^\n    git pull origin master\n    # 注：origin master表示git的主分支")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 情景三 分支合并时冲突(当我们git merge 分支名 时)\n    1.git status (查看发生冲突的文)\n    2.然后手动合并冲突\n    3.git add .  (添加更改后的文件)\n    4.git commit -m 'xj' (提交)")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-查看ssh密钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-查看ssh密钥","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.查看ssh密钥")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 1.进入.ssh目录")]),t._v("\n    cd ~/.ssh\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 2.查看id_rsa.pub文件")]),t._v("\n    cat id_rsa.pub\n")])])]),s("h3",{attrs:{id:"_5-克隆远程项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-克隆远程项目","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.克隆远程项目")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    git clone 远程源地址\n")])])]),s("h3",{attrs:{id:"_6-回退某个操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-回退某个操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.回退某个操作")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 1.查看命令历史")]),t._v("\n    git reflog\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 2.根据commitID撤销某个操作")]),t._v("\n    git reset --hard 某个commitId\n")])])]),s("h3",{attrs:{id:"_7-和远程分支建立关联"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-和远程分支建立关联","aria-hidden":"true"}},[t._v("#")]),t._v(" 7.和远程分支建立关联")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    git branch --set-upstream-to=origin/远程分支的名字 本地分支名\n")])])]),s("h3",{attrs:{id:"_8-删除文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-删除文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 8.删除文件")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 删除版本库中的文件")]),t._v("\n    git rm filename\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 恢复工作区中误删的文件")]),t._v("\n    git checkout -- filename\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 注：git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。")]),t._v("\n")])])]),s("h3",{attrs:{id:"_9-远程仓储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-远程仓储","aria-hidden":"true"}},[t._v("#")]),t._v(" 9.远程仓储")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 1.创建sshkey密钥")]),t._v('\n    ssh-keygen -t rsa -C "youremail@example.com"\n    '),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 2.在远程仓库中添加ssh公钥")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 3.关联远程库")]),t._v("\n    git remote add origin git@server-name:path/repo-name.git\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 4.第一次推送master分支的所有内容,此后只需要使用git push origin master即可推送最新修改")]),t._v("\n    git push -u origin master\n")])])]),s("h3",{attrs:{id:"_10-多人协作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-多人协作","aria-hidden":"true"}},[t._v("#")]),t._v(" 10.多人协作")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 1.查看远程仓储的详细信息")]),t._v("\n    git remote -v\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 2.推送本地分支到远程仓库,")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v("1.如果发生冲突，用git pull试图合并，如果发生冲突则解决冲突，再进行推送")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v("2.如果git pull后提示no tracking information(没有追踪信息)，则进行第四项，建立关联，之后pull，有冲突再合并")]),t._v("\n    git push origin 本地分支名\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 3.在本地创建和远程分支对应的分支")]),t._v("\n    git checkout -b 本地分支 origin/远程分支名\n    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 4.建立本地分支和远程分支的关联")]),t._v("\n    git branch --set-upstream 本地分支名 origin/远程分支名\n")])])]),s("h3",{attrs:{id:"_11-分支策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-分支策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 11.分支策略")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    1.master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n    2.干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；\n    3.每个人都有自己的分支，时不时地往dev分支上合并就可以了\n")])])]),s("blockquote",[s("p",[t._v("补充")])]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" git fetch和git pull的区别")]),t._v("\n    与git pull相比git fetch相当于是从远程获取最新版本到本地，但不会自动merge。如果需要有选择的合并git fetch是更好的选择。效果相同时git pull将更为快捷。\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 查看仓库当前的状态\n    git status")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    // 查看提交日志\n    git log")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 回退版本,在git中用HEAD表示当前版本,HEAD^表示上一个版本,HEAD^^表示上上个版本\n    git reset --hard HEAD^ 或\n    git reset --hard 3628164 (数字代表log里commit后面的id,只需要填前几位就可以)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 窗口关闭后回退版本(git reflog用来记录你的每一次命令)\n    git reflog")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 工作区和暂存区\n    工作区就是你建立的能看见的目录,.git即为git的版本库,Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。\n    用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n    用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("    # 撤销修改\n    1.直接丢弃工作区的修改，用命令git checkout -- file\n    ````")])])])])])},[],!1,null,null,null);a.default=e.exports}}]);